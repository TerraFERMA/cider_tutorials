<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value lines="1">short</string_value>
  </length>
  <owner>
    <string_value lines="1">cwilson</string_value>
  </owner>
  <description>
    <string_value lines="1">A driven cavity example for stokes</string_value>
  </description>
  <simulations>
    <simulation name="DrivenCavity">
      <input_file>
        <string_value lines="1" type="filename">driven_cavity/freeslip/driven_cavity.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <parameter_sweep>
        <parameter name="dmu">
          <values>
            <string_value lines="1">0.1 1.0 10.0</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud

if float(dmu) &lt;= 0.0:
  import sys
  print "ERROR: dmu must be greater than 0!"
  sys.exit(1)


libspud.set_option("/system::Stokes/coefficient::ViscosityJumpFactor/type/rank/value/constant", float(dmu))</string_value>
            <single_build/>
          </update>
        </parameter>
        <parameter name="ncells">
          <values>
            <string_value lines="1">16 32 64</string_value>
          </values>
        </parameter>
      </parameter_sweep>
      <dependencies>
        <run name="Mesh">
          <input_file>
            <string_value lines="1" type="filename">driven_cavity/unitsquare.geo</string_value>
          </input_file>
          <run_when name="input_changed_or_output_missing"/>
          <parameter_sweep>
            <parameter name="ncells">
              <update>
                <string_value lines="20" type="code" language="python">from string import Template as template

if int(ncells) &lt;= 0:
  import sys
  print "ERROR: ncells must be greater than 0!"
  sys.exit(1)

input_file = template(input_file).safe_substitute({'ncells':ncells})</string_value>
              </update>
            </parameter>
          </parameter_sweep>
          <required_output>
            <filenames name="Mesh">
              <string>
                <string_value lines="1" type="filename">unitsquare.xml.gz</string_value>
              </string>
            </filenames>
          </required_output>
          <commands>
            <command name="GMsh">
              <string_value lines="1">gmsh -2 unitsquare.geo</string_value>
            </command>
            <command name="Convert">
              <string_value lines="1">dolfin-convert unitsquare.msh unitsquare.xml</string_value>
            </command>
            <command name="GZip">
              <string_value lines="1">gzip unitsquare.xml</string_value>
            </command>
          </commands>
        </run>
      </dependencies>
      <variables>
        <variable name="vtudata">
          <string_value lines="20" type="code" language="python">import buckettools.vtktools as vtktools
import os
from lxml import etree
from buckettools.threadlibspud import *
from matplotlib.tri import Triangulation

def lastvtuinpvd(filename):
  assert(filename[-4:]==".pvd")
  dirname = os.path.dirname(filename)
  tree = etree.parse(filename)
  vtunames = [[element.attrib['timestep'], os.path.join(dirname, element.attrib['file'])] for element in tree.getroot().iterdescendants(tag="DataSet")]
  sortedvtunames = sorted(vtunames, key=lambda entry: float(entry[0]))
  return sortedvtunames[-1][-1]

filename = os.path.split(input_filename)[-1]
threadlibspud.load_options(filename)
basename = libspud.get_option("/io/output_base_name")
threadlibspud.clear_options()
vtufilename = lastvtuinpvd(basename+".pvd")
vtu = vtktools.vtu(vtufilename)

vtulocations = vtu.GetLocations()
triangles = []
for c in xrange(vtu.ugrid.GetNumberOfCells()):
  points = vtu.GetCellPoints(c)
  triangles.append(points)
triang = Triangulation(vtulocations[:,0], vtulocations[:,1], triangles)

v = vtu.GetField("Stokes::Velocity")
p = vtu.GetField("Stokes::Pressure")

vtudata = [triang, vtulocations, v, p]</string_value>
        </variable>
        <variable name="rmsvelocities">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from buckettools.threadlibspud import *
import os

filename = os.path.split(input_filename)[-1]
threadlibspud.load_options(filename)
basename = libspud.get_option("/io/output_base_name")
threadlibspud.clear_options()
stat = parser(basename+".stat")

vrms = stat["Stokes"]["VelocityL2NormSquared"]["functional_value"][-1]**0.5
vrmsu = stat["Stokes"]["VelocityL2NormSquaredUpper"]["functional_value"][-1]**0.5
vrmsl = stat["Stokes"]["VelocityL2NormSquaredLower"]["functional_value"][-1]**0.5

rmsvelocities = [vrms, vrmsu, vrmsl]</string_value>
        </variable>
        <variable name="errfile">
          <string_value lines="20" type="code" language="python">err = file("terraferma.err-0", 'r')
errfile = err.readlines()</string_value>
        </variable>
        <variable name="havedisplay">
          <string_value lines="20" type="code" language="python">import os

exitval = os.system('python -c "import matplotlib.pyplot as plt; plt.figure()"')
havedisplay = (exitval == 0) and "DISPLAY" in os.environ</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="errors">
      <string_value lines="20" type="code" language="python">noerrors = True
for dmu in errfile.parameters['dmu']:
  for ncells in errfile.parameters['ncells']:
    if len(errfile[{'dmu':dmu, 'ncells':ncells}]) &gt; 0:
      print "ERROR: dmu = {}, ncells produced an unexpected error!".format(dmu, ncells)
      noerrors = False

assert(noerrors)</string_value>
    </test>
    <test name="rmsvelocities">
      <string_value lines="20" type="code" language="python">for dmu in rmsvelocities.parameters['dmu']:
  for ncells in rmsvelocities.parameters['ncells']:
    index = {'dmu':dmu, 'ncells':ncells}
    print "dmu = {}, ncells = {}:".format(dmu, ncells)
    print "  rms velocity = {}".format(rmsvelocities[index][0])
    print "  rms velocity upper = {}".format(rmsvelocities[index][1])
    print "  rms velocity lower = {}".format(rmsvelocities[index][2])</string_value>
    </test>
    <test name="plot">
      <string_value lines="20" type="code" language="python">import matplotlib
if havedisplay[0][0]: 
  matplotlib.use('GTKAgg')
else:
  matplotlib.use('Agg')
import matplotlib.pyplot as plt
import numpy as np
import os

for dmu in vtudata.parameters['dmu']:
  for ncells in vtudata.parameters['ncells']:
    index = {'dmu':dmu, 'ncells':ncells}
    x = vtudata[index][1]
    v = vtudata[index][2]
    fig = plt.figure()
    stride = 1
    q = plt.quiver(x[:,0][::stride], x[:,1][::stride], v[:,0][::stride], v[:,1][::stride], width=0.005, units='x', scale_units='x', scale=10, color='k')
    plt.quiverkey(q, 0.9, 0.9, 1, "1", labelpos='S', coordinates='figure', color='k')
    plt.gca().set_aspect('equal')
    plt.xlabel('x')
    plt.ylabel('y')
    plt.title('velocity (dmu = {}, ncells = {})'.format(dmu, ncells), y=1.05)
    fig.savefig("driven_cavity_freeslip_dmu_{}_ncells_{}.png".format(dmu, ncells))

if havedisplay[0][0]: plt.show()</string_value>
    </test>
  </tests>
</harness_options>
