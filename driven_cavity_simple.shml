<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value lines="1">short</string_value>
  </length>
  <owner>
    <string_value lines="1">cwilson</string_value>
  </owner>
  <description>
    <string_value lines="1">A driven cavity example for stokes</string_value>
  </description>
  <simulations>
    <simulation name="DrivenCavity">
      <input_file>
        <string_value lines="1" type="filename">driven_cavity/simple/driven_cavity.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <parameter_sweep>
        <parameter name="dmu">
          <values>
            <string_value lines="1">1.0</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::Stokes/coefficient::ViscosityJumpFactor/type/rank/value/constant", float(dmu))</string_value>
            <single_build/>
          </update>
        </parameter>
      </parameter_sweep>
      <variables>
        <variable name="vtudata">
          <string_value lines="20" type="code" language="python">import buckettools.vtktools as vtktools
import os
from lxml import etree
from buckettools.threadlibspud import *
from matplotlib.tri import Triangulation

def lastvtuinpvd(filename):
  assert(filename[-4:]==".pvd")
  dirname = os.path.dirname(filename)
  tree = etree.parse(filename)
  vtunames = [[element.attrib['timestep'], os.path.join(dirname, element.attrib['file'])] for element in tree.getroot().iterdescendants(tag="DataSet")]
  sortedvtunames = sorted(vtunames, key=lambda entry: float(entry[0]))
  return sortedvtunames[-1][-1]

filename = os.path.split(input_filename)[-1]
threadlibspud.load_options(filename)
basename = libspud.get_option("/io/output_base_name")
threadlibspud.clear_options()
vtufilename = lastvtuinpvd(basename+".pvd")
vtu = vtktools.vtu(vtufilename)

vtulocations = vtu.GetLocations()
triangles = []
for c in xrange(vtu.ugrid.GetNumberOfCells()):
  points = vtu.GetCellPoints(c)
  triangles.append(points)
triang = Triangulation(vtulocations[:,0], vtulocations[:,1], triangles)

v = vtu.GetField("Stokes::Velocity")
p = vtu.GetField("Stokes::Pressure")

vtudata = [triang, vtulocations, v, p]</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="plot">
      <string_value lines="20" type="code" language="python">import matplotlib
matplotlib.use('GTKAgg')
import matplotlib.pyplot as plt
import numpy as np
import os

for dmu in vtudata.parameters['dmu']:
  x = vtudata[{'dmu':dmu}][1]
  v = vtudata[{'dmu':dmu}][2]
  print x.shape
  print v.shape
  fig = plt.figure()
  plt.quiver(x[:,0], x[:,1], v[:,0], v[:,1], linewidth=1, scale=10.0)
  plt.gca().set_aspect('equal')
  plt.xlabel('x')
  plt.ylabel('y')
  plt.title('velocity (dmu = {})'.format(dmu), y=1.05)
  fig.savefig("driven_cavity_simple_dmu_{}.png".format(dmu))

havedisplay = "DISPLAY" in os.environ
if not havedisplay:
  exitval = os.system('python -c "import matplotlib; matplotlib.use(\'GTKAgg\'); import matplotlib.pyplot as plt; plt.figure()"')
  havedisplay = (exitval == 0)
if havedisplay: plt.show()
</string_value>
    </test>
  </tests>
</harness_options>
