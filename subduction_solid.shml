<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value lines="1">medium</string_value>
  </length>
  <owner>
    <string_value lines="1">cwilson</string_value>
  </owner>
  <description>
    <string_value lines="1">A simple thermal subduction zone model.</string_value>
  </description>
  <simulations>
    <simulation name="Solid">
      <input_file>
        <string_value lines="1" type="filename">subduction/solid/subduction.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <parameter_sweep>
        <parameter name="delta">
          <values>
            <string_value lines="1">45</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
from string import Template as template

globalpython = libspud.get_option("/global_parameters/python")
libspud.set_option("/global_parameters/python", template(globalpython).safe_substitute({"delta":delta}))</string_value>
            <single_build/>
          </update>
        </parameter>
        <parameter name="tslab">
          <values>
            <string_value lines="1">50.0</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud

libspud.set_option("/system::Solid/coefficient::SlabAge/type/rank/value/constant", float(tslab)*1.e6*365*24*60*60)</string_value>
            <single_build/>
          </update>
        </parameter>
        <parameter name="tcrust">
          <values>
            <string_value lines="1">50.0</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud

libspud.set_option("/system::Solid/coefficient::SlabAge/type/rank/value/constant", float(tcrust)*1.e6*365*24*60*60)</string_value>
            <single_build/>
          </update>
        </parameter>
      </parameter_sweep>
      <dependencies>
        <run name="Mesh">
          <input_file>
            <string_value lines="1" type="filename">subduction/subduction.geo</string_value>
          </input_file>
          <run_when name="input_changed_or_output_missing"/>
          <parameter_sweep>
            <parameter name="delta">
              <update>
                <string_value lines="20" type="code" language="python">from string import Template as template

input_file = template(input_file).safe_substitute({"delta":delta})</string_value>
              </update>
            </parameter>
          </parameter_sweep>
          <required_output>
            <filenames name="Mesh">
              <string>
                <string_value lines="1" type="filename">subduction.xml.gz</string_value>
              </string>
            </filenames>
          </required_output>
          <commands>
            <command name="GMsh">
              <string_value lines="1">gmsh -2 -algo del2d subduction.geo</string_value>
            </command>
            <command name="Convert">
              <string_value lines="1">dolfin-convert subduction.msh subduction.xml</string_value>
            </command>
            <command name="GZip">
              <string_value lines="1">gzip subduction.xml</string_value>
            </command>
          </commands>
        </run>
      </dependencies>
      <variables>
        <variable name="vtudata">
          <string_value lines="20" type="code" language="python">import buckettools.vtktools as vtktools
import os
from lxml import etree
from buckettools.threadlibspud import *
from matplotlib.tri import Triangulation

def lastvtuinpvd(filename):
  assert(filename[-4:]==".pvd")
  dirname = os.path.dirname(filename)
  tree = etree.parse(filename)
  vtunames = [[element.attrib['timestep'], os.path.join(dirname, element.attrib['file'])] for element in tree.getroot().iterdescendants(tag="DataSet")]
  sortedvtunames = sorted(vtunames, key=lambda entry: float(entry[0]))
  return sortedvtunames[-1][-1]

filename = os.path.split(input_filename)[-1]
threadlibspud.load_options(filename)
basename = libspud.get_option("/io/output_base_name")
threadlibspud.clear_options()
vtufilename = lastvtuinpvd(basename+".pvd")
vtu = vtktools.vtu(vtufilename)

vtulocations = vtu.GetLocations()
triangles = []
for c in xrange(vtu.ugrid.GetNumberOfCells()):
  points = vtu.GetCellPoints(c)
  triangles.append(points)
triang = Triangulation(vtulocations[:,0], vtulocations[:,1], triangles)

T = vtu.GetScalarField("Solid::Temperature")
v = vtu.GetField("Solid::Velocity")

vtudata = [triang, vtulocations, T, v]</string_value>
        </variable>
        <variable name="errfile">
          <string_value lines="20" type="code" language="python">err = file("terraferma.err-0", 'r')
errfile = err.readlines()</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="errors">
      <string_value lines="20" type="code" language="python">noerrors = True
for delta in errfile.parameters['delta']:
  for tslab in errfile.parameters['tslab']:
    for tcrust in errfile.parameters['tcrust']:
      index = {'delta':delta, 'tslab':tslab, 'tcrust':tcrust}
      if len(errfile[index]) &gt; 0:
        print "ERROR: delta = {}, tslab = {}, tcrust = {} produced an unexpected error!".format(delta, tslab, tcrust)
        noerrors = False

assert(noerrors)</string_value>
    </test>
    <test name="plot">
      <string_value lines="20" type="code" language="python">import matplotlib
matplotlib.use('GTKAgg')
import matplotlib.pyplot as plt
import numpy as np
import os

e = 50.0
for delta in errfile.parameters['delta']:
  t = 300.
  tx = t/np.tan(float(delta)*np.pi/180.)
  for tslab in errfile.parameters['tslab']:
    for tcrust in errfile.parameters['tcrust']:
      index = {'delta':delta, 'tslab':tslab, 'tcrust':tcrust}
      fig = plt.figure()
      plt.tripcolor(vtudata[index][0], vtudata[index][2], shading="gouraud")
      plt.gca().set_xlim([0, tx+e])
      plt.gca().set_ylim([-tx, 0])
      plt.gca().set_aspect('equal')
      plt.xlabel('x')
      plt.ylabel('y')
      plt.title('temperature and velocity (delta = {}, tslab = {}, tcrust = {})'.format(delta, tslab, tcrust), y=1.05)
      cbar = plt.colorbar(ticks = np.linspace(min(vtudata[index][2]), max(vtudata[index][2]), 5))
      fig.savefig("subduction_solid_delta_{}_tslab_{}_tcrust_{}.png".format(delta, tslab, tcrust))

havedisplay = "DISPLAY" in os.environ
if not havedisplay:
  exitval = os.system('python -c "import matplotlib; matplotlib.use(\'GTKAgg\'); import matplotlib.pyplot as plt; plt.figure()"')
  havedisplay = (exitval == 0)
if havedisplay: plt.show()</string_value>
    </test>
  </tests>
</harness_options>
