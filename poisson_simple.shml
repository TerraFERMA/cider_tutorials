<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value lines="1">short</string_value>
  </length>
  <owner>
    <string_value lines="1">cwilson</string_value>
  </owner>
  <description>
    <string_value lines="1">A simple setup of instantaneous heat diffusion in a unit square.</string_value>
  </description>
  <simulations>
    <simulation name="Poisson">
      <input_file>
        <string_value lines="1" type="filename">poisson/simple/poisson.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <parameter_sweep>
        <parameter name="f">
          <values>
            <string_value lines="1">1.0</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::Poisson/coefficient::f/type/rank/value/constant", float(f))</string_value>
            <single_build/>
          </update>
        </parameter>
        <parameter name="k">
          <values>
            <string_value lines="1">1.0</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud

if float(k) &lt;= 0.0:
  import sys
  print "ERROR: k must be greater than 0!"
  sys.exit(1)

libspud.set_option("/system::Poisson/coefficient::k/type/rank/value/constant", float(k))</string_value>
            <single_build/>
          </update>
        </parameter>
        <parameter name="ncells">
          <values>
            <string_value lines="1">32</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud

if int(ncells) &lt;= 0:
  import sys
  print "ERROR: ncells must be greater than 0!"
  sys.exit(1)

libspud.set_option("/geometry/mesh::Mesh/source/number_cells", [int(ncells), int(ncells)])</string_value>
            <single_build/>
          </update>
        </parameter>
      </parameter_sweep>
      <variables>
        <variable name="vtudata">
          <string_value lines="20" type="code" language="python">import buckettools.vtktools as vtktools
import os
from lxml import etree
from buckettools.threadlibspud import *
from matplotlib.tri import Triangulation

def lastvtuinpvd(filename):
  assert(filename[-4:]==".pvd")
  dirname = os.path.dirname(filename)
  tree = etree.parse(filename)
  vtunames = [[element.attrib['timestep'], os.path.join(dirname, element.attrib['file'])] for element in tree.getroot().iterdescendants(tag="DataSet")]
  sortedvtunames = sorted(vtunames, key=lambda entry: float(entry[0]))
  return sortedvtunames[-1][-1]

filename = os.path.split(input_filename)[-1]
threadlibspud.load_options(filename)
basename = libspud.get_option("/io/output_base_name")
threadlibspud.clear_options()
vtufilename = lastvtuinpvd(basename+".pvd")
vtu = vtktools.vtu(vtufilename)

vtulocations = vtu.GetLocations()
triangles = []
for c in xrange(vtu.ugrid.GetNumberOfCells()):
  points = vtu.GetCellPoints(c)
  triangles.append(points)
triang = Triangulation(vtulocations[:,0], vtulocations[:,1], triangles)

u = vtu.GetScalarField("Poisson::u")

vtudata = [triang, u]</string_value>
        </variable>
        <variable name="errfile">
          <string_value lines="20" type="code" language="python">err = file("terraferma.err-0", 'r')
errfile = [line for line in err.readlines() if not line.startswith("WARNING:")]</string_value>
        </variable>
        <variable name="havedisplay">
          <string_value lines="20" type="code" language="python">import os

exitval = os.system('python -c "import matplotlib.pyplot as plt; plt.figure()"')
havedisplay = (exitval == 0) and "DISPLAY" in os.environ</string_value>
        </variable>
        <variable name="ustats">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from buckettools.threadlibspud import *
import os

filename = os.path.split(input_filename)[-1]
threadlibspud.load_options(filename)
basename = libspud.get_option("/io/output_base_name")
threadlibspud.clear_options()
stat = parser(basename+".stat")

umax = stat["Poisson"]["u"]["max"][-1]
uint = stat["Poisson"]["integral"]["functional_value"][-1]

ustats = [umax, uint]</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="errors">
      <string_value lines="20" type="code" language="python">noerrors = True
for f in errfile.parameters['f']:
  for k in errfile.parameters['k']:
    for ncells in errfile.parameters['ncells']:
      if len(errfile[{'f':f, 'k':k, 'ncells':ncells}]) &gt; 0:
        print "ERROR: f = {}, k = {}, ncells = {} produced an unexpected error!".format(f, k, ncells)
        noerrors = False

assert(noerrors)</string_value>
    </test>
    <test name="ustats">
      <string_value lines="20" type="code" language="python">for f in ustats.parameters['f']:
  for k in ustats.parameters['k']:
    for ncells in ustats.parameters['ncells']:
      index = {'f':f, 'k':k, 'ncells': ncells}
      print "f = {}, k = {}, ncells = {}:".format(f, k, ncells)
      print "  max = {}".format(ustats[index][0])
      print "  integral = {}".format(ustats[index][1])</string_value>
    </test>
    <test name="plot">
      <string_value lines="20" type="code" language="python">import matplotlib
if havedisplay[0][0][0]: 
  matplotlib.use('GTKAgg')
else:
  matplotlib.use('Agg')
import matplotlib.pyplot as plt
import numpy as np
import os

for f in vtudata.parameters['f']:
  for k in vtudata.parameters['k']:
    for ncells in vtudata.parameters['ncells']:
      index = {'f':f, 'k':k, 'ncells': ncells}
      fig = plt.figure()
      plt.tripcolor(vtudata[index][0], vtudata[index][1], shading="gouraud")
      plt.gca().set_aspect('equal')
      plt.xlabel('x')
      plt.ylabel('y')
      plt.title('temperature distribution (f = {}, k = {}, ncells = {})'.format(f, k, ncells), y=1.05)
      cbar = plt.colorbar(ticks = np.linspace(min(vtudata[index][1]), max(vtudata[index][1]), 5))
      fig.savefig("poisson_simple_f_{}_k_{}_ncells_{}.png".format(f, k, ncells))
</string_value>
    </test>
    <test name="pcolor">
      <string_value lines="20" type="code" language="python">import matplotlib
if havedisplay[0][0][0]: 
  matplotlib.use('GTKAgg')
else:
  matplotlib.use('Agg')
import matplotlib.pyplot as plt
import matplotlib.colors as colors
import numpy as np
import os

if len(ustats.parameters["f"]) &gt; 1 or len(ustats.parameters["k"]) &gt; 1:
  for ncells in ustats.parameters["ncells"]:
    index = {'ncells':ncells}
    fs = [float(f) for f in ustats.parameters["f"]]
    ks = [float(k) for k in ustats.parameters["k"]]
    Fs, Ks = np.meshgrid(fs, ks)
    fig1 = plt.figure()
    plt.imshow(np.asarray(ustats[index])[:,:,0], interpolation='nearest', cmap='bwr', origin='lower', norm=colors.LogNorm())
    plt.gca().set_aspect('equal')
    plt.xlabel('k')
    plt.ylabel('f')
    plt.gca().set_yticks(range(0, len(fs)))
    plt.gca().set_yticklabels(ustats.parameters['f'])
    plt.gca().set_xticks(range(0, len(ks)))
    plt.gca().set_xticklabels(ustats.parameters['k'])
    plt.title('maximum (ncells = {})'.format(ncells), y=1.05)
    cbar = plt.colorbar()
    fig2 = plt.figure()
    plt.imshow(np.asarray(ustats[index])[:,:,0], interpolation='nearest', cmap='bwr', origin='lower', norm=colors.LogNorm())
    plt.gca().set_aspect('equal')
    plt.xlabel('k')
    plt.ylabel('f')
    plt.gca().set_yticks(range(0, len(fs)))
    plt.gca().set_yticklabels(ustats.parameters['f'])
    plt.gca().set_xticks(range(0, len(ks)))
    plt.gca().set_xticklabels(ustats.parameters['k'])
    plt.title('integral (ncells = {})'.format(ncells), y=1.05)
    cbar = plt.colorbar()</string_value>
    </test>
    <test name="convergence">
      <string_value lines="20" type="code" language="python">import matplotlib
if havedisplay[0][0][0]: 
  matplotlib.use('GTKAgg')
else:
  matplotlib.use('Agg')
import matplotlib.pyplot as plt
import numpy as np
import os

if len(ustats.parameters["ncells"]) &gt; 1:
  for f in ustats.parameters["f"]:
    for k in ustats.parameters["k"]:
      index = {'f':f, 'k':k}
      ncells = [int(nc) for nc in ustats.parameters["ncells"]]
      fig1 = plt.figure()
      plt.plot(ncells, np.asarray(ustats[index])[:,0])
      plt.xlabel('ncells')
      plt.ylabel('maximum')
      plt.title('maximum (f = {}, k = {})'.format(f, k), y=1.05)
      fig2 = plt.figure()
      plt.plot(ncells, np.asarray(ustats[index])[:,1])
      plt.xlabel('ncells')
      plt.ylabel('integral')
      plt.title('integral (f = {}, k = {})'.format(f, k), y=1.05)</string_value>
    </test>
    <test name="display">
      <string_value lines="20" type="code" language="python">import matplotlib
if havedisplay[0][0][0]: 
  matplotlib.use('GTKAgg')
else:
  matplotlib.use('Agg')
import matplotlib.pyplot as plt
import os

if havedisplay[0][0][0]: plt.show()</string_value>
    </test>
  </tests>
</harness_options>
